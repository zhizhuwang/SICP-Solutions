(define (sum term a next b)
    (if (> a b)
        0
        (+ (term a)
           (sum term (next a) next b))
        )
    )

(define (simpson f a b n)
    (define h (/ (- b a) n))
    (define (y k) (f (+ a (* k h))))
    (define (factor k) 
      (cond ((or (= 0 k) (= n k)) 1)
            ((even? k) 2)
            ((odd? k) 4)
        )
      )
    (define (term k) (* (factor k) (y k)))
    (define (next k) (+ 1 k))
    (* (/ h 3) (sum term (exact->inexact 0) next n))
  )
(simpson cube 0 1 100)

(define (integral f a b n)
    (define h (/ (- b a) n))
    (define (add-2dx x) (+ x h h))
    (define h/3 (/ h 3))
    
    (* h/3 (+ (f a)
              (* 2 (sum f (+ a h h) add-2dx (- b h h)))
              (* 4 (sum f (+ a h)   add-2dx (- b h)))
              (f b)
              ))
    )

(integral cube (exact->inexact 0) 1 1000)
