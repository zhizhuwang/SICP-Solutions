> (define (reverse l)
    (define (iter acc l)
      (if (null? l) acc
          (iter (cons (car l) acc) (cdr l))))
    (iter '() l)
  )
> (define (same-parity x . remain)
    (define (iter x acc remain) 
    (cond ((null? remain) acc)
          ((= 0 (remainder (- x (car remain)) 2)) 
           (iter x (cons (car remain) acc) (cdr remain)))
          (else
           (iter x acc (cdr remain)))))
    (reverse (iter x (list x) remain))
  )
        
> (same-parity 1 2 3 4)
'(1 3)
> (same-parity 1 2 3 4 5 6)
'(1 3 5)
> (same-parity 2 3 4 5 6)
'(2 4 6)
