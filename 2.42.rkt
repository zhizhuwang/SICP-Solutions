#lang racket

(define (enumerate-interval low high)
  (if (> low high)
      '()
      (cons low (enumerate-interval (+ 1 low) high))))
(define (flatmap proc seqs)
  (accumulate append '() (map proc seqs)))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence) 
          (accumulate op initial (cdr sequence)))))

(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))

(define (adjoin-position row col rest)
  (cons row rest))
  
(define empty-board (list ))

(define (safe-row? new-row step rest)
  (cond ((null? rest) #t)
        ((or (= new-row (car rest))
             (= new-row (+ (car rest) step))
             (= new-row (- (car rest) step))
             ) #f)
         (else (safe-row? new-row (+ step 1) (cdr rest)))
         ))

(define (safe? col positions)
  (let ((step 1))
    (safe-row? (car positions) 1 (cdr positions))))
    
> (safe-row? 2 3 1 (list 7 3))
#t
> (safe? 3 (list 2 7 3))
#t
> (queens 8)
'((4 2 7 3 6 8 5 1)
  (5 2 4 7 3 8 6 1)
  (3 5 2 8 6 4 7 1)
  (3 6 4 2 8 5 7 1)
  (5 7 1 3 8 6 4 2)
  (4 6 8 3 1 7 5 2)
  (3 6 8 1 4 7 5 2)
  (5 3 8 4 7 1 6 2)
  (5 7 4 1 3 8 6 2)
  (4 1 5 8 6 3 7 2)
  (3 6 4 1 8 5 7 2)
  (4 7 5 3 1 6 8 2)
  (6 4 2 8 5 7 1 3)
  (6 4 7 1 8 2 5 3)
  (1 7 4 6 8 2 5 3)
  (6 8 2 4 1 7 5 3)
  (6 2 7 1 4 8 5 3)
  (4 7 1 8 5 2 6 3)
  (5 8 4 1 7 2 6 3)
  (4 8 1 5 7 2 6 3)
  (2 7 5 8 1 4 6 3)
  (1 7 5 8 2 4 6 3)
  (2 5 7 4 1 8 6 3)
  (4 2 7 5 1 8 6 3)
  (5 7 1 4 2 8 6 3)
  (6 4 1 5 8 2 7 3)
  (5 1 4 6 8 2 7 3)
  (5 2 6 1 7 4 8 3)
  (6 3 7 2 8 5 1 4)
  (2 7 3 6 8 5 1 4)
  (7 3 1 6 8 5 2 4)
  (5 1 8 6 3 7 2 4)
  (1 5 8 6 3 7 2 4)
  (3 6 8 1 5 7 2 4)
  (6 3 1 7 5 8 2 4)
  (7 5 3 1 6 8 2 4)
  (7 3 8 2 5 1 6 4)
  (5 3 1 7 2 8 6 4)
  (2 5 7 1 3 8 6 4)
  (3 6 2 5 8 1 7 4)
  (6 1 5 2 8 3 7 4)
  (8 3 1 6 2 5 7 4)
  (2 8 6 1 3 5 7 4)
  (5 7 2 6 3 1 8 4)
  (3 6 2 7 5 1 8 4)
  (6 2 7 1 3 5 8 4)
  (3 7 2 8 6 4 1 5)
  (6 3 7 2 4 8 1 5)
  (4 2 7 3 6 8 1 5)
  (7 1 3 8 6 4 2 5)
  (1 6 8 3 7 4 2 5)
  (3 8 4 7 1 6 2 5)
  (6 3 7 4 1 8 2 5)
  (7 4 2 8 6 1 3 5)
  (4 6 8 2 7 1 3 5)
  (2 6 1 7 4 8 3 5)
  (2 4 6 8 3 1 7 5)
  (3 6 8 2 4 1 7 5)
  (6 3 1 8 4 2 7 5)
  (8 4 1 3 6 2 7 5)
  (4 8 1 3 6 2 7 5)
  (2 6 8 3 1 4 7 5)
  (7 2 6 3 1 4 8 5)
  (3 6 2 7 1 4 8 5)
  (4 7 3 8 2 5 1 6)
  (4 8 5 3 1 7 2 6)
  (3 5 8 4 1 7 2 6)
  (4 2 8 5 7 1 3 6)
  (5 7 2 4 8 1 3 6)
  (7 4 2 5 8 1 3 6)
  (8 2 4 1 7 5 3 6)
  (7 2 4 1 8 5 3 6)
  (5 1 8 4 2 7 3 6)
  (4 1 5 8 2 7 3 6)
  (5 2 8 1 4 7 3 6)
  (3 7 2 8 5 1 4 6)
  (3 1 7 5 8 2 4 6)
  (8 2 5 3 1 7 4 6)
  (3 5 2 8 1 7 4 6)
  (3 5 7 1 4 2 8 6)
  (5 2 4 6 8 3 1 7)
  (6 3 5 8 1 4 2 7)
  (5 8 4 1 3 6 2 7)
  (4 2 5 8 6 1 3 7)
  (4 6 1 5 2 8 3 7)
  (6 3 1 8 5 2 4 7)
  (5 3 1 6 8 2 4 7)
  (4 2 8 6 1 3 5 7)
  (6 3 5 7 1 4 2 8)
  (6 4 7 1 3 5 2 8)
  (4 7 5 2 6 1 3 8)
  (5 7 2 6 3 1 4 8))